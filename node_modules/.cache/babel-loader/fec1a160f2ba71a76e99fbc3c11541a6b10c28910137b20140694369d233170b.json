{"ast":null,"code":"var _jsxFileName = \"/Users/shenglanli/projects/React/monster-rolodex/monster-rolodex/src/App.js\";\nimport { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport logo from './logo.svg';\nimport './App.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  //represents the entire app\n  constructor() {\n    super();\n    this.onSearchChange = event => {\n      const searchField = event.target.value.toLocaleLowerCase();\n      //update setState acoordingly\n      this.setState(() => {\n        //if use a variable as the only field, JS use the variable as the key&Var value as the value -> update the searchField value here\n        return {\n          searchField\n        };\n      });\n    };\n    this.state = {\n      //keep track of/store the full list - <best practice>keep original state for reference esp after creating new arrays\n      monsters: [],\n      //store user input - to allow access of events in components\n      searchField: ''\n    };\n  }\n\n  //use whenever making API request for component to render\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }, () => {}));\n  }\n  //add a method for onChange callback function\n\n  //include built-in render()method of Component\n  render() {\n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const {\n      onSearchChange\n    } = this;\n    //filter from the original arr of data from state & referencing the updated searchField from state\n    const filteredMonsters = monsters.filter(monster => {\n      //array.filter() - generate a new arr;  string.includes() method to filter the names partially match e.target.value (search term) - not case sensitive\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search-box\",\n        type: \"search\",\n        placeholder: \"search monsters\",\n        onChange: onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["Component","CardList","logo","App","constructor","onSearchChange","event","searchField","target","value","toLocaleLowerCase","setState","state","monsters","componentDidMount","fetch","then","response","json","users","render","filteredMonsters","filter","monster","name","includes"],"sources":["/Users/shenglanli/projects/React/monster-rolodex/monster-rolodex/src/App.js"],"sourcesContent":["import { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport logo from './logo.svg';\nimport './App.css';\nimport './App.css';\nclass App extends Component { //represents the entire app\n  constructor() {\n    super();\n\n    this.state = {\n      //keep track of/store the full list - <best practice>keep original state for reference esp after creating new arrays\n      monsters: [],\n      //store user input - to allow access of events in components\n      searchField: ''\n    };\n  }\n\n  //use whenever making API request for component to render\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((users) => this.setState(\n      () => {\n        return { monsters: users};\n      },\n      () => {\n\n      }\n    ))\n  }\n  //add a method for onChange callback function\n  onSearchChange = (event) => {\n    const searchField = event.target.value.toLocaleLowerCase();\n    //update setState acoordingly\n    this.setState(() => {\n      //if use a variable as the only field, JS use the variable as the key&Var value as the value -> update the searchField value here\n      return { searchField };\n    });\n  }\n  //include built-in render()method of Component\n  render() {\n    const { monsters, searchField } = this.state;\n    const { onSearchChange } = this;\n    //filter from the original arr of data from state & referencing the updated searchField from state\n    const filteredMonsters = monsters.filter((monster) => {\n      //array.filter() - generate a new arr;  string.includes() method to filter the names partially match e.target.value (search term) - not case sensitive\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n\n    return (\n      <div className=\"App\">\n        <input \n        className='search-box' \n        type='search' \n        placeholder='search monsters' \n        onChange={ onSearchChange } \n        />\n        {/* {filteredMonsters.map((monster) => {\n          //add key value to the highest level of the div ele\n          //use array method, e.g. .map() to effectively render multiple obj values\n          return (\n            <div key={monster.id}> \n              <h1>{monster.name}</h1>\n            </div>\n          );\n          })}  */}\n          <CardList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,QAAQ,MAAM,4CAA4C;AACjE,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAO,WAAW;AAAC;AACnB,MAAMC,GAAG,SAASH,SAAS,CAAC;EAAE;EAC5BI,WAAW,GAAG;IACZ,KAAK,EAAE;IAAC,KAwBVC,cAAc,GAAIC,KAAK,IAAK;MAC1B,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,iBAAiB,EAAE;MAC1D;MACA,IAAI,CAACC,QAAQ,CAAC,MAAM;QAClB;QACA,OAAO;UAAEJ;QAAY,CAAC;MACxB,CAAC,CAAC;IACJ,CAAC;IA7BC,IAAI,CAACK,KAAK,GAAG;MACX;MACAC,QAAQ,EAAE,EAAE;MACZ;MACAN,WAAW,EAAE;IACf,CAAC;EACH;;EAEA;EACAO,iBAAiB,GAAG;IAClBC,KAAK,CAAC,4CAA4C,CAAC,CAClDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,KAAK,IAAK,IAAI,CAACR,QAAQ,CAC5B,MAAM;MACJ,OAAO;QAAEE,QAAQ,EAAEM;MAAK,CAAC;IAC3B,CAAC,EACD,MAAM,CAEN,CAAC,CACF,CAAC;EACJ;EACA;;EASA;EACAC,MAAM,GAAG;IACP,MAAM;MAAEP,QAAQ;MAAEN;IAAY,CAAC,GAAG,IAAI,CAACK,KAAK;IAC5C,MAAM;MAAEP;IAAe,CAAC,GAAG,IAAI;IAC/B;IACA,MAAMgB,gBAAgB,GAAGR,QAAQ,CAACS,MAAM,CAAEC,OAAO,IAAK;MACpD;MACA,OAAOA,OAAO,CAACC,IAAI,CAACd,iBAAiB,EAAE,CAACe,QAAQ,CAAClB,WAAW,CAAC;IAC/D,CAAC,CAAC;IAEF,oBACE;MAAK,SAAS,EAAC,KAAK;MAAA,wBAClB;QACA,SAAS,EAAC,YAAY;QACtB,IAAI,EAAC,QAAQ;QACb,WAAW,EAAC,iBAAiB;QAC7B,QAAQ,EAAGF;MAAgB;QAAA;QAAA;QAAA;MAAA,QACzB,eAUA,QAAC,QAAQ;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACV;EAEV;AACF;AAEA,eAAeF,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}